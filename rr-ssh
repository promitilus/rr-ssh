#!/bin/bash
#
# PROGRAM	: rr-ssh
# PURPOSE	: SSH wrapper for simple fault-tolerant remote connections
#			and destiation discovery using DNS SRV records
# AUTHOR	: Samuel Behan <samuel.behan(at)dob(dot)sk> (c) 2019-2020
# HOMEPAGE	: https://github.com/promitilus/rr-ssh
# LICENSE	: GNU GPL v3 or later (see file LICENSE)
################################################################################


#############
## DEFAULTS
RR_SSH_VERSION=0.2;
# RR_SSH_HOSTS		- space separated list of hosts, default empty
RR_SSH_HOSTS="${RR_SSH_HOSTS:=}";
# RR_SSH_VERBOSE	- 0 or 1, enable verbose logging, default 0
RR_SSH_VERBOSE="${RR_SSH_VERBOSE:=0}";
# RR_SSH_SLEEP		- number, sleep before switching host, default 0.11
RR_SSH_SLEEP="${RR_SSH_SLEEP:=0.11}";
# RR_SSH_DNS_SRV_PREFIX	- host prefix for SRV discover, default _ssh._tcp
RR_SSH_DNS_SRV_PREFIX="${RR_SSH_DNS_SRV_PREFIX:=_ssh._tcp}";
# RR_SSH_GATETIME	- integer, minimum connect time in seconds to consider connection successfull
RR_SSH_GATETIME="${RR_SSH_GATETIME:=30}";
# RR_SSH_CONNECT_TIMEOUT - integer, connection timeout, default 15
RR_SSH_CONNECT_TIMEOUT="${RR_SSH_CONNECT_TIMEOUT:=15}";
# RR_SSH_LOOP		- 0 or 1, restart connection forever
RR_SSH_LOOP="${RR_SSH_LOOP:=0}";
# RR_SSH_LOOP_SLEEP	- integer, minimum sleep in seconds between restart, default 1
RR_SSH_LOOP_SLEEP="${RR_SSH_LOOP_SLEEP:=1}";
# RR_SSH_LOOP_SLEEP_MAX	- integer, maximum sleep in seconds between restart, default 10
RR_SSH_LOOP_SLEEP_MAX="${RR_SSH_LOOP_SLEEP_MAX:=10}";
##############

function rr_ssh() {
	local dest="$1";shift;

	host="${dest%:*}";
	port="${dest#*:}";
	local -a ssh_args=("$@" "-o" "HostName=$host" "-o" "ConnectTimeout=$RR_SSH_CONNECT_TIMEOUT");
	[ -n "$port" -o "$host" = "$port" ] && ssh_args=("${ssh_args[@]}" "-o" "Port=$port");

	[ "$RR_SSH_VERBOSE" = "1" ] && echo "rr-ssh: executing ssh ${ssh_args[@]}" >&2;
	ssh "${ssh_args[@]}";
}

function __dns_srv_resolve() {
	nslookup -querytype=srv -nofail -retry=2 "$1." | grep -w "^$1" | sort -k 5 -r | awk '{ print $7 ":" $6 }';
}

####
# MAIN
function __main() {
	local -a hosts;

	# discover hosts:
	#	1. try to resolve their SRV record and add them to list
	#	2. otherwise only add host to list
	if [ -n "$RR_SSH_HOSTS" ];
	then
		for host in "$RR_SSH_HOSTS";
		do
			srvs=`__dns_srv_resolve "$RR_SSH_DNS_SRV_PREFIX.$host"`;
			if [ -n "$srvs" ];
			then	for srv in $srvs;
				do
					hosts=("${hosts[@]}" $srv);
				done;
			else
				hosts=("${hosts[@]}" $host);
			fi;
		done;
	else
		hosts="";
	fi;

	if [ -n "$hosts" ];
	then
		# loop list of hosts
		#	1. after successfull connect and disconnect exit script with success
		#	2. otherwise loop try hosts
		#	3. on no more hosts exit with failure
		for host in ${hosts[@]};
		do
			time_start=`date +%s`;


			rr_ssh "$host" "$@";

			status="$?";
			time_stop=`date +%s`;

			if [ "$?" -eq 0 ] && [ $(($time_stop - $time_stop)) -gt $RR_SSH_GATETIME ];
			then	return 0;
			fi;

			[ -n "$RR_SSH_SLEEP" ] && sleep "$RR_SSH_SLEEP";
		done;

		# None of eligible hosts responded
		return 1;
	else
		# Work as normal SSH
		ssh "$@";
		return $?;
	fi;
}


set -u;

if [ "$RR_SSH_LOOP" = "1" ];
then
	round=0;
	sleep="$RR_SSH_LOOP_SLEEP";
	while true;
	do
		round=$(($round+1));

		__main "$@";

		if [ "$?" -eq 0 ];
		then
			sleep="$RR_SSH_LOOP_SLEEP";
		else
			sleep=$(($sleep + $RR_SSH_LOOP_SLEEP));
			if [ "$sleep" -gt "$RR_SSH_LOOP_SLEEP_MAX" ];
			then
				sleep="$RR_SSH_LOOP_SLEEP_MAX";
			fi;
		fi;

		# sleep backoff
		[ "$RR_SSH_VERBOSE" = "1" ] && echo "rr-ssh: repeating loop, round=$round, sleep=$sleep" >&2;
		[ -n "$sleep" ] && sleep "$sleep";
	done;
else
	__main "$@";
	exit $?;
fi;
